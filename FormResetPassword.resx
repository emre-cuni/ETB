<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAsAAAAjwAAAJwAAACbAAAAmwAAAJsAAACbAAAAmwAAAJsAAACbAAAAmwAA
        AJsAAACbAAAAmQAAAEkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAAAwAAAAUAAAACAAAAAAAAAIoAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAAvgAAAA0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ABUAAABKAAAAewAAAJwAAACsAAAAsAAAAKkAAABMAAAAkwAAAP8AAADoAAAA6AAAAPgAAADpAAAA6AAA
        APcAAADpAAAA6AAAAPYAAADqAAAA6AAAAPkAAADJAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAABLAAAAygAAAPgAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAH0AAACSAAAA8wAAAGIAAABfAAAA4AAA
        AGwAAABXAAAA3QAAAHcAAABQAAAA2AAAAIIAAABLAAAA1gAAAMoAAAAQAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAJgAAANkAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAfQAAAJMAAADkAAAAWQAA
        AFUAAADEAAAAZAAAAE0AAADCAAAAbgAAAEUAAAC+AAAAeAAAAD4AAADHAAAAygAAABAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAABvAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAB9AAAAkQAA
        AP8AAADaAAAA1gAAAP8AAADfAAAA0gAAAP8AAADkAAAAzQAAAP8AAADoAAAAygAAAP8AAADIAAAAEAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAKUAAAD/AAAA/wAAAP8AAAD/AAAA/gAAAPgAAAD3AAAA/gAA
        AH8AAACOAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AMUAAAAPAAAAAAAAAAAAAAAAAAAAAAAAAA0AAAAaAAAAwgAAAP8AAAD/AAAA/wAAAP8AAAD5AAAAdQAA
        AEAAAAC0AAAArAAAAEwAAAC/AAAA8wAAAP8AAAD/AAAA6QAAAMgAAADIAAAAyAAAAMgAAADIAAAAyAAA
        AMgAAADHAAAAbAAAAAIAAAAAAAAAAAAAAAAAAAALAAAAhwAAAE4AAADMAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAABjAAAAAwAAALYAAAD6AAAAkQAAAC4AAADFAAAA/wAAAOAAAABLAAAADAAAAA4AAAAOAAAADgAA
        AA4AAAAOAAAADgAAAA0AAAADAAAAAAAAAAAAAAAAAAAAAAAAAHAAAADuAAAAUQAAAMsAAAD/AAAA/wAA
        AP8AAAD/AAAA9gAAAFkAAAAFAAAApQAAAP8AAAD5AAAAVwAAAMAAAADjAAAARwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxAAAA4wAAAOkAAAA9AAAAwQAA
        AP8AAAD/AAAA/wAAAP8AAAC9AAAACwAAAAAAAAA8AAAA8gAAAPwAAABaAAAAjQAAAFYAAAAZAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAJcAAAD/AAAAiQAA
        AAUAAACpAAAA/wAAAP8AAAD/AAAA/wAAAM0AAAAbAAAAAAAAAFQAAAD3AAAA/wAAAKcAAABFAAAAiwAA
        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
        8H/gf+D/8B8B//gAA//+AAf//4Af//////8=
</value>
  </data>
</root>